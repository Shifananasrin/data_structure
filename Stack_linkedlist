#include <stdio.h>
#include <stdlib.h>

// Define Node structure
struct Node {
    int data;
    struct Node *link;
};

// Declare top pointer as global variable
struct Node *top = NULL;  // Initialize top to NULL


// Function to create a new Node
struct Node *createNode(int data) {
    struct Node *newnode = malloc(sizeof(struct Node));
    newnode->data = data;
    newnode->link = NULL;
    return newnode;
}

// Function to push a new element onto the stack
void push(int data) {
    struct Node *newnode = createNode(data);  // Create a new node
    if (top == NULL) {
        top = newnode;  // If stack is empty, new node becomes the top
    } else {
        newnode->link = top;  // Point new node to the current top
        top = newnode;  // Update top to the new node
    }
    printf("Inserted value: %d\n", data);
}

// Function to pop an element from the stack
void pop() {
    if (top == NULL) {
        printf("Stack is empty\n");
    } else {
        struct Node *ptr = top;  // Temporarily store the current top node
        top = top->link;         // Move top to the next node in the stack
        printf("Deleted value: %d\n", ptr->data);  // Print deleted value
        free(ptr);               // Free the memory of the old top node
    }
}

// Function to peek at the top element of the stack
void peek() {
    if (top == NULL) {
        printf("Stack is empty\n");
    } else {
        printf("Top element: %d\n", top->data);
    }
}

// Function to traverse and print the list
void display() {
    struct Node *ptr = top;
    if (ptr == NULL) {
        printf("Stack is empty\n");
    } else {
        printf("Stack elements: ");
        while (ptr != NULL) {
            printf("%d ", ptr->data);  // Print current node's data
            ptr = ptr->link;  // Move to the next node
        }
        printf("\n");  // Newline after printing all elements
    }
}

int main() {
    int opt, data;

    do {
        printf("\n..................\n");
        printf("1) PUSH\n");
        printf("2) POP\n");
        printf("3) PEEK\n");
        printf("4) DISPLAY\n");
        printf("5) EXIT\n");
        printf("\n..................\n");
        printf("Choose your option: ");
        scanf("%d", &opt);

        switch (opt) {
            case 1:
                printf("\nEnter value to push: ");
                scanf("%d", &data);
                push(data);
                break;
            case 2:
                pop();
                break;
            case 3:
                peek();
                break;
            case 4:
                display();
                break;
            case 5:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("\nInvalid option! Try again...\n");
        }
    } while (1);

    return 0;
}
